services:
  kafka:
    image: bitnami/kafka:3.3.2
    hostname: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_NODE_ID: "0"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER

  akhq:
    image: tchiotludo/akhq:0.25.1
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              connect:
                - name: "kafka-connect"
                  url: "http://kafka-connect:8083"
    ports:
      - "8084:8080"

  # load some test resources into kafka
  mock-data-loader:
    image: confluentinc/cp-kafkacat:7.1.13
    entrypoint: [ "/bin/bash", "-c" ]
    command: >
      "while true; do
        sleep 10;
        kafkacat -b kafka:9092 -K: -t fhir-all -P -l /data/mock-data.ndjson;
      done"
    volumes:
      - ./data/mock-data.ndjson:/data/mock-data.ndjson:ro
    depends_on:
      - kafka
